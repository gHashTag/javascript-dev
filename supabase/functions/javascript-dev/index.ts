// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

import { Bot, webhookCallback } from "https://deno.land/x/grammy@v1.8.3/mod.ts";
import { createUser } from "../create-user.ts";
import { getQuestion } from "../get-question.ts";
import { resetProgress } from "../reset-progress.ts";
import { getBiggest } from "../get-biggest.ts";
import { pathIncrement } from "../path-increment.ts";
import { updateProgress } from "../update-progress.ts";
import { trueCounter } from "../true-counter.ts";
import { getUid } from "../get-uid.ts";
import { getAiFeedback } from "../get-ai-feedback.ts";
import { pathDecrement } from "../path-decrement.ts";

const bot = new Bot(Deno.env.get("BOT_TOKEN") || "");

bot.command("start", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  createUser(ctx);
  ctx.reply(
    `Hi, ${ctx.update.message?.from.first_name}! üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–µ—Å—Ç–æ–≤ ‚Äì –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üñ•Ô∏è‚ú® `,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data: "start_test" }],
        ],
      },
    },
  );
});

bot.on("message:text", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  const text = ctx.message.text;
  try {
    const feedback = await getAiFeedback(text);
    await ctx.reply(feedback, { parse_mode: "Markdown" });
    return;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    return;
  }
});

bot.on("callback_query:data", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  const callbackData = ctx.callbackQuery.data;
  const isHaveAnswer = callbackData.split("_").length === 4;

  if (callbackData === "start_test") {
    try {
      resetProgress(ctx.callbackQuery.from.username || "");
      const questionContext = {
        lesson_number: 1,
        subtopic: 1,
      };

      const questions = await getQuestion(questionContext);
      if (questions.length > 0) {
        const {
          topic,
          image_lesson_url,
        } = questions[0];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: 0XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
            callback_data: `javascript_01_01`,
          }],
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url, {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      } else {
        ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
  }

  if (!isHaveAnswer) {
    try {
      const [language, lesson, subtopic] = callbackData.split("_");
      let questions;
      if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
        // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
        questions = await getQuestion({
          lesson_number: Number(lesson),
          subtopic: Number(subtopic),
        });
      } else {
        // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
        console.error(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(114):",
          lesson,
          subtopic,
          callbackData,
        );
        await ctx.reply(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
        );
        return;
      }
      const {
        question,
        variant_0,
        variant_1,
        variant_2,
        id,
      } = questions[0];

      const biggestSubtopic = await getBiggest(Number(lesson));
      const ifSubtopic = biggestSubtopic === Number(subtopic) ? false : true;
      const newPath = pathIncrement({
        isSubtopic: ifSubtopic,
        path: callbackData,
      });
      const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
      let newQuestions;
      if (!isNaN(Number(newLesson)) && !isNaN(Number(newSubtopic))) {
        // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
        newQuestions = await getQuestion({
          lesson_number: Number(newLesson),
          subtopic: Number(newSubtopic),
        });
      } else {
        // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
        console.error(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(143):",
          newLesson,
          newSubtopic,
          callbackData,
        );
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.");
        return;
      }
      const user_id = await getUid(ctx.callbackQuery.from.username || "");
      if (!user_id) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }

      const trueCount = await trueCounter(user_id);

      if (newQuestions.length > 0) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `<b>–í–æ–ø—Ä–æ—Å ‚Ññ${id}</b>\n\n${question}\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: ${trueCount}XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: variant_0 || "–í–∞—Ä–∏–∞–Ω—Ç 1",
            callback_data: `${newPath}_0`,
          }],
          [{
            text: variant_1 || "–í–∞—Ä–∏–∞–Ω—Ç 2",
            callback_data: `${newPath}_1`,
          }],
          [{
            text: variant_2 || "–ù–µ –∑–Ω–∞—é",
            callback_data: `${newPath}_2`,
          }],
        ];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageCaption({
          reply_markup: { inline_keyboard: inlineKeyboard },
          caption: messageText,
          parse_mode: "HTML",
        });
        return;
      }
    } catch (error) {
      console.error(error);
      await ctx.reply(
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. ${callbackData}`,
      );
    }
  }

  if (isHaveAnswer) {
    try {
      const [language, lesson_number, subtopic, answer] = callbackData.split(
        "_",
      );
      const questionContext = {
        lesson_number: Number(lesson_number),
        subtopic: Number(subtopic),
      };

      const questions = await getQuestion(questionContext);
      if (questions.length > 0) {
        const {
          topic,
          image_lesson_url,
        } = questions[0];

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }

        const path = `${language}_${lesson_number}_${subtopic}`;
        const biggestSubtopic = await getBiggest(Number(lesson_number));
        const prevPath = pathDecrement({
          path,
          biggestSubtopic: biggestSubtopic || 0,
        });
        const [prevLanguage, prevLesson, prevSubtopic] = prevPath.split("_");
        const prevQuestoins = await getQuestion({
          lesson_number: Number(prevLesson),
          subtopic: Number(prevSubtopic),
        });
        const { correct_option_id: prevCorrectOptionId } = prevQuestoins[0];
        let isTrueAnswer = null;
        if (prevCorrectOptionId === Number(answer)) {
          isTrueAnswer = true;
        } else {
          isTrueAnswer = false;
        }
        await updateProgress({ user_id, isTrue: isTrueAnswer, path: prevPath });
        const trueCount = await trueCounter(user_id);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: ${trueCount}XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
            callback_data: `${language}_${lesson_number}_${subtopic}`,
          }],
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url, {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      } else {
        ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
  }
  return;
});

const handleUpdate = webhookCallback(bot, "std/http");

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      return new Response("not allowed", { status: 405 });
    }

    const result = await handleUpdate(req);
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ result —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Response.
    // –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Response –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω–∞—á–µ.
    if (!(result instanceof Response)) {
      console.error("handleUpdate –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç Response", result);
      return new Response("Internal Server Error", { status: 500 });
    }
    return result;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err);
    return new Response("Internal Server Error", { status: 500 });
  }
});
